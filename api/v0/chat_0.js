import dotenv from "dotenv";
dotenv.config();
import express, { response } from "express";
import supabase from "../../supabase.js";
import client from "../../postgres.js";
import CryptoJS from "crypto-js";
import axios from "axios";

const ChatApiRouter = express.Router();

ChatApiRouter.get("/", (req, res) => {
  res.send(
    `<h2>This is Api route. You SHOULD'NT be here. GET out of here and enjoy the chat.</h2>`
  );
});

ChatApiRouter.get("/test", async (req, res) => {
  res.json({ message: "This is test route." });
});

ChatApiRouter.post("/addchat", async (req, res) => {
  try {
    const { requestingUser, toBeAddedUser } = req.body;

    // check for requesting user first
    const { data: userData, error: error1 } = await supabase
      .from("userinfo")
      .select("username,password,chats")
      .eq("username", requestingUser.username);
    if (error1) {
      console.log("On Api call [POST] /api/v0/chat/addchat =>");
      console.log(error1);
      res.json({ error: error1, message: "Supabase Server error" });
      return;
    }
    if (userData.length !== 1) {
      console.log("On Api call [POST] /api/v0/chat/addchat =>");
      console.log("No user found?!");
      res.json({
        error: "No user found for your credentials",
        message: "No user found. Make sure your have proper credentials.",
      });
      return;
    }

    // chreck for user to be added
    const { data: AddedUserData, error: error2 } = await supabase
      .from("userinfo")
      .select("username,chats")
      .eq("username", toBeAddedUser.username);
    if (error2) {
      console.log("On Api call [POST] /api/v0/chat/addchat =>");
      console.log(error2);
      res.json({ error: error2, message: "Supabase Server error" });
      return;
    }
    if (AddedUserData.length !== 1) {
      console.log("On Api call [POST] /api/v0/chat/addchat =>");
      console.log("No user found?!");
      res.json({
        error: "No user found for Addin a chat",
        message:
          "No user found to be added. Make sure your have proper credentials.",
      });
      return;
    }

    // check for password of current user
    const user = userData[0];
    const addedUser = AddedUserData[0];
    if (user.password !== requestingUser.password) {
      console.log("On Api call [POST] /api/v0/chat/addchat =>");
      console.log("Password from requestingUser is not encrypted");
      res.json({
        error: "Bad credentials",
        message: "Unusual data provided. Password is not properly encrypted.",
      });
      return;
    }

    if (user.chats.includes(toBeAddedUser.username)) {
      console.log("On Api call [POST] /api/v0/chat/addchat =>");
      console.log("chat already exists!");
      res.json({
        error: "chat already exists",
        message: "Chat with this user alredy exists!",
      });
      return;
    }

    // Do 3 things
    // add a table with sorting named
    const sorter = [requestingUser.username, toBeAddedUser.username];
    sorter.sort();
    const tableName = `${sorter[0]}_to_${sorter[1]}`;
    const result = await client.query(`create table ${tableName}(
      id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      sender_id bigint REFERENCES userinfo(id) on delete set null,
      reciever_id bigint REFERENCES userinfo(id) on delete set null,
      type varchar,
      content varchar,
      attachments json,
      timestamp bigint,
      metadata json
    )`);

    const realtime_result = await client.query(
      `alter publication supabase_realtime add table ${tableName};`
    );

    user.chats.push(toBeAddedUser.username);
    const newRequestingArray = user.chats;

    const { error: error3 } = await supabase
      .from("userinfo")
      .update({ chats: newRequestingArray })
      .eq("username", requestingUser.username);

    addedUser.chats.push(requestingUser.username);
    const newAddedChats = addedUser.chats;

    const { error: error4 } = await supabase
      .from("userinfo")
      .update({ chats: newAddedChats })
      .eq("username", toBeAddedUser.username);

    if (error3 || error4) {
      console.log("On Api call [POST] /api/v0/chat/addchat =>");
      console.log(error3, error4);
      res.json({
        error: JSON.stringify({ error3, error4 }),
        message: "Supabase Server error",
      });
    }

    res.json({ message: "success!" });
  } catch (error) {
    console.log("On Api call [POST] /api/v0/chat/addchat =>");
    console.log(error);
    res.json({
      error: JSON.stringify(error),
      message: "Internal Server Error",
    });
  }
});

ChatApiRouter.post("/message/send", async (req, res) => {
  try {
    const { sender, message, reciever } = req.body;

    if (!sender.id || !reciever.id) {
      res.json({
        error: "you need id of both users",
        message: "You need to provide the ids of both user.",
      });
      return;
    }

    // check for requesting user first
    const { data: userData, error: error1 } = await supabase
      .from("userinfo")
      .select("username,password,chats")
      .eq("username", sender.username);
    if (error1) {
      console.log("On Api call [POST] /api/v0/chat/message/send =>");
      console.log(error1);
      res.json({ error: error1, message: "Supabase Server error" });
      return;
    }
    if (userData.length !== 1) {
      console.log("On Api call [POST] /api/v0/chat/message/send =>");
      console.log("No user found?!");
      res.json({
        error: "No user found for your credentials",
        message: "No user found. Make sure your have proper credentials.",
      });
      return;
    }

    // check for password
    const user = userData[0];
    if (user.password !== sender.password) {
      console.log("On Api call [POST] /api/v0/chat/message/send =>");
      console.log("Password from requestingUser is not encrypted");
      res.json({
        error: "Bad credentials",
        message: "Unusual data provided. Password is not properly encrypted.",
      });
      return;
    }

    // check if chat exists or not
    if (!user.chats.includes(reciever.username)) {
      console.log("On Api call [POST] /api/v0/chat/message/send => ");
      res.json({
        error: "chat does not exists",
        message: "chat with this user does not exists.",
      });
      return;
    }

    // create a proper message object
    const sendingMessage = {
      sender_id: sender.id,
      reciever_id: reciever.id,
      type: message.type || "text",
      content: message.content || "",
      attachments: message.attachments || [],
      timestamp: message.timestamp || new Date().getTime(),
      metadata: {
        read: "sent",
        deleted: "none",
        forwarded: "none",
      },
    };

    const sorter = [sender.username, reciever.username];
    sorter.sort();
    const chatTable = `${sorter[0]}_to_${sorter[1]}`;

    // send to database
    const { error: error2 } = await supabase
      .from(chatTable)
      .insert([sendingMessage]);

    if (error2) {
      console.log("On Api call [POST] /api/v0/chat/message/send =>");
      console.log(error2);
      res.json({ error: error2, message: "Supabase Server error" });
      return;
    }

    // TODO: send notification to reciever
    const { data: recieverData, error: error3 } = await supabase
      .from("userinfo")
      .select("notification_tokens")
      .eq("username", reciever.username);
    recieverData[0].notification_tokens.forEach(({ os, token }, i) => {
      axios
        .post("https://exp.host/--/api/v2/push/send", {
          to: token,
          sound: "default",
          title: sender.username,
          body: message.content,
          data: { someData: "goes here" },
        })
        .then((response) => {
          // console.log(response);
        });
    });

    res.json({ message: "message sent" });
  } catch (error) {
    console.log("On Api call [POST] /api/v0/chat/message/send: uncaught =>");
    console.log(error);
    res.json({
      error: JSON.stringify(error),
      message: "Internal Server Error",
    });
  }
});

export default ChatApiRouter;
